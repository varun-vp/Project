{"version":3,"sources":["logo.svg","CountDown/Countdown.jsx","PartyPopper/PartyPop.jsx","App.js","reportWebVitals.js","index.js"],"names":["hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","className","CountDown","console","log","Date","now","stratTime","endTime","remainingTime","getTime","daysDuration","Math","ceil","colors","duration","initialRemainingTime","elapsedTime","onComplete","totalElapsedTime","PartyPopper","width","height","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src","document","getElementById"],"mappings":"wOAAe,I,uCCOTA,G,MAAc,MAEdC,EAAa,MACbC,EAAa,CACjBC,WAAW,EACXC,KAAM,IACNC,YAAa,GAITC,EAAa,SAACC,EAAWC,GAC7B,OACE,sBAAKC,UAAU,eAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBD,IACvB,8BAAMD,QAUG,SAASG,IACpBC,QAAQC,IAAIC,KAAKC,OASjB,IAAMC,EAAY,IAAIF,KAChBG,EAAU,IAAIH,KAAK,cAGzBF,QAAQC,IAAI,gBAAgBG,GAC5BJ,QAAQC,IAAI,cAAcI,GAG5B,IAAMC,GAAiBD,EAAQE,UAAYH,EAAUG,WAAY,IACjEP,QAAQC,IAAI,iBAAkBK,GAC9B,IAEME,EAFOC,KAAKC,KAAKJ,EAAgBhB,GAGvC,OACE,sBAAKQ,UAAU,YAAf,UACE,cAAC,uBAAD,2BACMP,GADN,IAEEoB,OAAQ,CAAC,CAAC,YACVC,SAAUJ,EACVK,qBAAsBP,EAJxB,SAMG,gBAAGQ,EAAH,EAAGA,YAAH,OACCnB,EAAW,QAAoBa,EAAeM,GAlClBxB,EAAc,OAqC9C,cAAC,uBAAD,2BACMC,GADN,IAEEoB,OAAQ,CAAC,CAAC,YACVC,SAAUtB,EACVuB,qBAAsBP,EAAgBhB,EACtCyB,WAAY,SAACC,GAAD,MAAsB,CAChCV,EAAgBU,EAAmB3B,IANvC,SASG,gBAAGyB,EAAH,EAAGA,YAAH,OACCnB,EAAW,SAAsBL,EAAawB,GAhDhBxB,EAAcD,EAAe,OAmD/D,cAAC,uBAAD,2BACME,GADN,IAEEoB,OAAQ,CAAC,CAAC,YACVC,SAAUvB,EACVwB,qBAAsBP,EAAgBjB,EACtC0B,WAAY,SAACC,GAAD,MAAsB,CAChCV,EAAgBU,EA/EJ,KAyEhB,SASG,gBAAGF,EAAH,EAAGA,YAAH,OACCnB,EAAW,WAA0BN,EAAcyB,GA9DnBzB,EArBpB,GAqBoD,OAiEpE,cAAC,uBAAD,2BACME,GADN,IAEEoB,OAAQ,CAAC,CAAC,YACVC,SAzFc,GA0FdC,qBAAsBP,EA1FR,GA2FdS,WAAY,SAACC,GAAD,MAAsB,CAChCV,EAAgBU,EAAmB,IANvC,SASG,gBAAGF,EAAH,EAAGA,YAAH,OACCnB,EAAW,UAhGC,GAgGyBmB,EA5EW,U,oBCtB3C,SAASG,IAItB,OAEE,cAAC,IAAD,CACEC,MALU,IAMVC,OALW,MC8BFC,MA7Bf,WACE,OACE,sBAAKtB,UAAU,MAAf,UAgBE,kDAGA,cAACmB,EAAD,IAEA,cAAClB,EAAD,QCnBSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,wBAAQC,IAAI,qDACZ,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.5ee6e559.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport '../CountDown/style.css';\r\n\r\n\r\n\r\nconst minuteSeconds = 60;\r\nconst hourSeconds = 3600;\r\n//const daySeconds = 86400;\r\nconst daySeconds = 86400;\r\nconst timerProps = {\r\n  isPlaying: true,\r\n  size: 100,\r\n  strokeWidth: 5\r\n\r\n};\r\n\r\nconst renderTime = (dimension, time) => {\r\n  return (\r\n    <div className=\"time-wrapper\">\r\n      <div className=\"time\">{time}</div>\r\n      <div>{dimension}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getTimeSeconds = (time) => (minuteSeconds - time) | 0;\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\r\nconst getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\r\nconst getTimeDays = (time) => (time / daySeconds) | 0;\r\n\r\nexport default function CountDown() {\r\n    console.log(Date.now());\r\n\r\n    //const date = new Date();\r\n    //const stratTime = date.getTime(); \r\n    //const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\r\n    // const endTime = stratTime + 243248*10; // use UNIX timestamp in seconds\r\n    //const endTime = Date.now()/1000;\r\n    \r\n\r\n    const stratTime = new Date();\r\n    const endTime = new Date(\"07/23/2021\");\r\n\r\n    //var diff = date2 - date1;\r\n    console.log('startTime -> ',stratTime);\r\n    console.log('endTime -> ',endTime);\r\n    \r\n\r\n  const remainingTime = (endTime.getTime() - stratTime.getTime()) /1000;\r\n  console.log(\"remaining Time\", remainingTime);\r\n  const days = Math.ceil(remainingTime / daySeconds);\r\n  //const daysDuration = days * daySeconds;\r\n  const daysDuration = days;\r\n  return (\r\n    <div className=\"countDown\">\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#7E2E84\"]]}\r\n        duration={daysDuration}\r\n        initialRemainingTime={remainingTime}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))\r\n        }\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#D14081\"]]}\r\n        duration={daySeconds}\r\n        initialRemainingTime={remainingTime % daySeconds}\r\n        onComplete={(totalElapsedTime) => [\r\n          remainingTime - totalElapsedTime > hourSeconds\r\n        ]}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))\r\n        }\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#EF798A\"]]}\r\n        duration={hourSeconds}\r\n        initialRemainingTime={remainingTime % hourSeconds}\r\n        onComplete={(totalElapsedTime) => [\r\n          remainingTime - totalElapsedTime > minuteSeconds\r\n        ]}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\r\n        }\r\n      </CountdownCircleTimer>\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#218380\"]]}\r\n        duration={minuteSeconds}\r\n        initialRemainingTime={remainingTime % minuteSeconds}\r\n        onComplete={(totalElapsedTime) => [\r\n          remainingTime - totalElapsedTime > 0\r\n        ]}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\r\n        }\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n//import useWindowSize from './useWindowSize';\r\nimport Confetti from 'react-confetti'\r\n\r\nexport default function PartyPopper()  {\r\n  //const { width, height } = useWindowSize()\r\n  const width = 2000;\r\n  const height = 3000;\r\n  return (\r\n    \r\n    <Confetti\r\n      width={width}\r\n      height={height}\r\n    />\r\n  )\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Example from '../src/popperfile.js';\nimport CountDown from '../src/CountDown/Countdown.jsx';\nimport PartyPopper from '../src/PartyPopper/PartyPop.jsx';\nlet num = 100;\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      {/* <Example/> */}\n      <h3>CountDown Begins</h3>\n      {\n        num %2 == 0 &&\n      <PartyPopper/>\n      }\n      <CountDown/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <script src=\"https://unpkg.com/react-popper/dist/index.umd.js\"></script>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}